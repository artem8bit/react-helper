import "./style.css";

const VirtualDom = () => {
  return (
    <div className="container">
      <h2>Virtual.DOM</h2>
      <p>
        <b>Виртуальный DOM (VDOM)</b> — это концепция программирования, в которой
        «виртуальное» представление пользовательского интерфейса хранится в
        памяти и <b>синхронизируется</b> с «настоящим» DOM при помощи библиотеки, такой
        как ReactDOM. Этот процесс называется <b>согласованием</b>. DOM
        расшифровывается как <b>Document Object Model </b>(объектная модель документа).
        При каждом изменении <b>UI (user interface)</b>, DOM также обновляется для
        отображения этих изменений. Частые манипуляции с DOM негативно влияют на
        производительность. DOM представляет собой древовидную структуру данных.
        Поэтому изменения и обновления самого DOM являются достаточно быстрыми.
        Но после изменения обновленный элемент и все его потомки (дочерние
        элементы) должны быть повторно отрисованы (отрендерены) для обновления
        UI приложения. <b>Повторный рендеринг</b> — очень медленный процесс. Таким
        образом, чем больше у нас компонентов UI, тем более дорогими с точки
        зрения производительности являются обновления DOM. Манипуляции с RDOM
        являются медленными. Манипуляции с VDOM намного быстрее, поскольку они
        не отображаются (отрисовываются) на экране. Когда в UI добавляются новые
        элементы, создается VDOM в виде дерева. Каждый элемент является  <b> узлом </b>
        этого дерева. При изменении состояния любого элемента, создается новое
        дерево. Затем это новое дерево сравнивается (diffed) со старым. После
        этого вычисляется наиболее эффективный метод внесения изменений в VDOM.
        Цель данных вычислений состоит в <b>минимизации количества операций,
        совершаемых с DOM</b>. После этого вычисляется разница между предыдущей и
        текущей версиями виртуального DOM-дерева. Затем все родительское
        поддерево подвергается повторному рендерингу для представления
        обновленного UI. Наконец, это обновленное дерево используется для
        обновления VDOM. В React каждая часть UI является компонентом и почти
        каждый компонент имеет состояние (state). При изменении состояния
        компонента, React обновляет VDOM. После обновления VDOM, React
         <b> сравнивает его текущую версию с предыдущей</b>. Этот процесс называется
        «поиском различий» (diffing). После обнаружения объектов, изменившихся в
        VDOM, React  обновляет соответствующие объекты в RDOM. Это <b>существенно
        повышает производительность по сравнению с прямыми манипуляциями DOM</b>.
        Именно это делает React высокопроизводительной библиотекой JavaScript.
        React использует эвристический O(n) (линейный) алгоритм, основываясь на
        двух предположениях:
      </p>
      <ul>
        <li>Два элемента разных типов приводят к построению разных деревьев</li>
        <li>Разработчик может обеспечить стабильность элементов между рендерингами посредством пропа key (ключ)</li>
      </ul>
    </div>
  );
};
export { VirtualDom };
